@page "/pages/error/401"

<MudContainer Class="mt-4" MaxWidth="MaxWidth.Small">
    <div class="d-flex flex-column">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 569 384.7" width="100%" height="100%" style="max-height: 300.84px; max-width: 550px;">
            <path d="M600.18,328.75v60.74L705.4,450.24V389.5Z" transform="translate(-315.12 -126.28)" style="fill: #7467ef"></path>
            <path d="M600.18,450.24V511L705.4,450.24V389.5Z" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
            <path d="M495.15,389.5v60.74l105-60.75V328.75Z" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
            <path d="M495.15,389.49v60.75l105,60.74V450.24Z" transform="translate(-315.12 -126.28)" style="fill: #7467ef"></path>
            <path d="M419.18,327.71l52.06,30.05L500,341.17l-52.06-30.05Z" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
            <path d="M471.24,276.38V436.64l-52.07-30.06V126.28l52.06,30.06" transform="translate(-315.12 -126.28)" style="fill: #7467ef"></path>
            <path d="M315.12,387.83l52.06,30.05,104.06-60.12L419.17,327.7Z" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
            <path d="M415.43,188.31l-52.06-30.05L315.12,387.82l52.06,30.06Z" transform="translate(-315.12 -126.28)" style="fill: #7467ef"></path>
            <path d="M363.37,158.26l52.06,30.05,55.8-32-52.06-30Z" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
            <path d="M728,156.34l52.06-30V406.58L728,436.64V276.39" transform="translate(-315.12 -126.28)" style="fill: #594ae2"></path>
        </svg>
        <LoginRedirect ReturnUrl="@ReturnUrl"></LoginRedirect>
    </div>
</MudContainer>

@code {
    #region Public Properties

    [Parameter]
    public string ReturnUrl { get; set; }

    [Parameter]
    public bool RedirectToLoginIfUserNotAuthenticated { get; set; }

    [Parameter]
    public bool RedirectToLoginIfUserNotAuthorized { get; set; }

    #endregion Public Properties

    #region Private Properties

    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private IReturnUrlProvider ReturnUrlProvider { get; set; }

    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    #endregion Private Properties

    #region Protected Methods

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();

        var user = authState.User;

        if (user.Identity is { IsAuthenticated: false } && RedirectToLoginIfUserNotAuthenticated)
        {
            await ReturnUrlProvider.SetReturnUrl(ReturnUrl);
            NavigationManager.NavigateTo("account/login", forceLoad: true);
        }

        if (user.Identity is { IsAuthenticated: true } && RedirectToLoginIfUserNotAuthorized)
        {
            await ReturnUrlProvider.SetReturnUrl(ReturnUrl);
            NavigationManager.NavigateTo("account/login", forceLoad: true);
        }
    }

    #endregion Protected Methods
}