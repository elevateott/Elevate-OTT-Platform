@page "/signalr"

<h3>SignalR Demo</h3>

@using Microsoft.AspNetCore.SignalR.Client
@using ElevateOTT.ClientPortal.Hubs
@inject NavigationManager NavigationManager
@implements IAsyncDisposable


<PageTitle>SignalR Chat</PageTitle>
<h3>SignalR Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind="_username" class="form-control" placeholder="What's your name?">
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 500px;" @ref="TextAreaRef">
        @_messages
            </textarea>
    <div class="input-group">
        <input @bind-value="_message"
               @bind-value:event="oninput"
               @onkeyup="HandleInput"
               class="form-control">
        <button class="btn btn-primary form-group-append"
                @onclick="Send"
                disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}


@code
{
    [Inject]
    public ChatHub? ChatHub { get; set; }

    private string _messages = string.Empty;

    private string _username = string.Empty;

    private string _message = string.Empty;

    ElementReference TextAreaRef;

    private async Task Connect()
    {
        ChatHub?.Connect(_username);
        if (ChatHub?.HubConnection == null) return;

        ChatHub.HubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : user + ":")} {message}";
            _messages += msg + "\n";

            Console.WriteLine($"user: {user}");
            Console.WriteLine($"message: {message}");

            InvokeAsync(StateHasChanged);
        });
        
        await ChatHub.HubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (ChatHub?.HubConnection != null)
        {
            await ChatHub.HubConnection.SendAsync("AddMessageToChat", _username, _message);
            _message = String.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args.Key.Equals("Enter"))
        {
            await Send();
        }
    }

    public bool IsConnected => ChatHub?.HubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (ChatHub?.HubConnection != null)
        {
            await ChatHub.HubConnection.DisposeAsync();
        }
    }
}