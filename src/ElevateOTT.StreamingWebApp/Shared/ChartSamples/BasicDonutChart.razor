<MudPaper Elevation="25" Class="pa-4">
    <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" @bind-SelectedIndex="Index" InputData="@Data" InputLabels="@Labels"></MudChart>
</MudPaper>

<MudPaper Class="pa-4 mt-2 d-flex justify-center">
    <MudButton OnClick="AddDataSize" Variant="Variant.Filled" Color="Color.Primary">@Resource.Add</MudButton>
    <MudButton @onclick="RandomizeData" Variant="Variant.Filled" Class="mx-4">@Resource.Randomize</MudButton>
    <MudButton OnClick="RemoveDataSize" Variant="Variant.Filled" Color="Color.Secondary">@Resource.Remove</MudButton>
</MudPaper>

@code {
    private int Index = -1; //default value cannot be 0 -> first selectedindex is 0.
    int _dataSize = 4;
    public double[] Data = { 50, 25, 20, 5 };
    public string[] Labels = {
        Resource.Fossil,
        Resource.Nuclear,
        Resource.Solar,
        Resource.Wind,
        Resource.Oil,
        Resource.Coal,
        Resource.Gas,
        Resource.Biomass,
        Resource.Hydro,
        Resource.Geothermal,
        Resource.Fossil,
        Resource.Nuclear,
        Resource.Solar,
        Resource.Wind,
        Resource.Oil,
        Resource.Coal,
        Resource.Gas,
        Resource.Biomass,
        Resource.Hydro,
        Resource.Geothermal
    };

    Random _random = new Random();

    void RandomizeData()
    {
        var newData = new double[_dataSize];
        for (int i = 0; i < newData.Length; i++)
            newData[i] = _random.NextDouble() * 100;
        Data = newData;
        StateHasChanged();
    }

    void AddDataSize()
    {
        if (_dataSize < 20)
        {
            _dataSize = _dataSize + 1;
            RandomizeData();
        }
    }
    void RemoveDataSize()
    {
        if (_dataSize > 0)
        {
            _dataSize = _dataSize - 1;
            RandomizeData();
        }
    }
}